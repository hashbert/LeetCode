//https://leetcode.com/problems/reverse-linked-list/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if (head==null || head.next==null) return head;
        ListNode curr = head;
        ListNode next = head.next;
        ListNode prev = null;
        while (curr!=null){
            prev = curr;
            curr = next;
            curr.next=prev;
            next=next.next;
        }
        
        return prev.next;
    }
}

//Need a series of 3 pointers. Move all along one spot and link curr to prev. Repeat until curr is null.
//Time: O(n)
//Space: O(n)
