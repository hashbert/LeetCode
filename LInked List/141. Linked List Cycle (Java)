//https://leetcode.com/problems/linked-list-cycle/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode p1 = head;
        ListNode p2 = head;
        while (p1!=null && p2!=null){
            p1=p1.next;
            if (p2.next!=null){
                p2=p2.next.next;
            }
            if (p1==p2) return true;
            
        }
        return false;
    }
}

//Fast pointer, slow pointer problem. Move both until one is null or they are the same. Return true if same, false otherwise.
//Time: O(n) where n is number of nodes
//Space: O(1)
