//https://leetcode.com/problems/subtree-of-another-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        //base cases
        if (s==null && t==null) return true;
        if (s==null || t==null) return false;
        boolean current = isSameTree(s,t);
        return current || isSubtree(s.left, t) || isSubtree(s.right, t);
    }
    //helper function to find if trees are the same
    public boolean isSameTree(TreeNode s, TreeNode t) {
        //base cases
        if (s==null && t==null) return true;
        if (s==null || t==null) return false;
        if (s.val!=t.val) return false;
        return isSameTree(s.left, t.left) && isSameTree(s.right, t.right);
    }
}

//Time: O()
//Space: O()
