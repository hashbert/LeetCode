//https://leetcode.com/problems/maximum-depth-of-binary-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public int maxDepth(TreeNode root) {
        if (root==null) return 0; //base case
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;  //recursive solution where 1 is added for each level
    }
}
 
// Time:  O(n) where n is the number of nodes in the tree
// Space: O(n) worst case scenario call stack is n long
