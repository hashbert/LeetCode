//https://leetcode.com/problems/invert-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root==null) return root;
        //Swap left and right children and recurse down each path. Need to save pointer to one of the children.
        TreeNode save = root.left;
        root.left = invertTree(root.right);
        root.right = invertTree(save);
        return root;
    }
}

//Time: O(n) where n is number of nodes in the tree
//Space: O(n)
