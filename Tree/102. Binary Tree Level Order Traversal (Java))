//https://leetcode.com/problems/binary-tree-level-order-traversal/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList();
        if (root==null) return list;
        Queue<TreeNode> q = new LinkedList();
        q.offer(root);
        while (!q.isEmpty()){
            int size = q.size();
            List<Integer> subList = new ArrayList();
            for (int i = 0; i<size; i++){
                if (q.peek().left!=null) q.offer(q.peek().left);
                if (q.peek().right!=null) q.offer(q.peek().right);
                subList.add(q.poll().val);
            }
            list.add(subList);
        }
        return list;
    }
}

//Time: O(n) where n is total number of nodes in tree
//Space: O(n)
